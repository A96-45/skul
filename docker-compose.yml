# Skola Production Docker Setup
# Complete production-ready container configuration

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: skola-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: skola_prod
      POSTGRES_USER: skola_user
      POSTGRES_PASSWORD: skola_password_2024_secure
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - skola-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U skola_user -d skola_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: skola-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://skola_user:skola_password_2024_secure@postgres:5432/skola_prod
      - JWT_SECRET=skola_production_jwt_secret_key_2024_min_64_chars_long_for_security
      - PORT=3000
      - LOG_LEVEL=info
      - RATE_LIMIT_MAX=1000
      - RATE_LIMIT_WINDOW=900000
      - UPLOAD_DIR=/app/uploads
      - MAX_FILE_SIZE=10485760
      - CORS_ORIGIN=*
    ports:
      - "3000:3000"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - skola-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health/check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Web Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: skola-frontend
    restart: unless-stopped
    environment:
      - EXPO_PUBLIC_API_URL=http://backend:3000
      - EXPO_PUBLIC_TRPC_URL=http://backend:3000/trpc
      - EXPO_PUBLIC_NODE_ENV=production
    ports:
      - "8085:80"
    depends_on:
      - backend
    networks:
      - skola-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis for caching (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: skola-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - skola-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - with-cache

  # Nginx Reverse Proxy (for production deployment)
  nginx:
    image: nginx:alpine
    container_name: skola-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/prod.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - skola-network
    profiles:
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  skola-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
